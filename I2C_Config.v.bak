module I2C_AV_Config (
		iCLK,
		iRST_N,
		
		I2C_SCLK,
		I2C_SDAT
		);
		
	input iCLK;
	input iRST_N;
	
	output I2C_SCLK;
	inout  I2C_SDAT;
	
	reg [15:0] mI2C_CLK_Div;
	reg [15:0] mI2C_DATA;
	reg mI2C_CTRL_CLK;
	reg mI2C_GO;
	wire mI2C_END;
	wire mI2C_ACK;
	reg [15:0] LUT_DATA;
	reg [5:0] LUT_INDEX;
	reg [3:0] mSetup_ST;
	
	parameter CLK_Freq = 50000000;
	parameter I2C_Freq = 20000;
	
	parameter LUT_SIZE = 51;
	parameter Dummy_DATA = 0;
	parameter Set_LIN_L = 1;
	parameter SET_LIN_R = 2;
	parameter SET_HEAD_L = 3;
	parameter SET_HEAD_R = 4;
	parameter A_PATH_CTRL = 5;
	parameter D_PATH_CTRL = 6;
	parameter POWER_ON = 7;
	parameter SET_FORMAT = 8;
	parameter SAMPLE_CTRL = 9;
	parameter SET_ACTIVE = 10;
	
	always @ (posedge iCLK or negedge iRST_N)
	begin
		if(!RST_N)
		begin
			mI2C_CTRL_CLK <= 0;
			mI2C_CLK_DIV <= 0;
		end
		else
		begin
			if(mI2C_CLK_DIV < (CLK_Freq/I2C_Freq))
				mI2C_CLK_DIV <= mI2C_CLK_DIV+1'b1;
			else
			begin
				mI2C_CLK_DIV <= 0;
				mI2C_CTRL_CLK <= ~mI2C_CTRL_CLK;
			end
		end
	end
	
	I2C_Controller u0 (.CLOCK(mI2C_CTRL_CLK),
		.I2C_SCLK(I2C_SCLK),
		.I2C_SDAT(I2C_SDAT),
		.I2C_DATA(mI2C_DATA),
		.GO(mI2C_GO),
		.END(mI2C_END),
		.ACK(mI2C_ACK),
		.RESET(iRST_N)
	);
	
	always @ (posedge mI2C_CTRL_CLK or negedge iRST_N)
	begin
		if(!RST_N)
		begin
			LUT_INDEX <= 0;
			mSetup_ST <= 0;
			mI2C_GO <= 0;
		end
		else
		begin
			if(LUT_INDEX<LUT_SIZE)
			begin
				case(mSetup_ST)
				
					0:	
					begin
						if(mI2C_END)
						begin
							if(!mI2C_ACK)
								mSetup_ST	<=	1;
							else
								mSetup_ST	<=	0;							
							mI2C_GO		<=	0;
						end
					end
					
					1:	
					begin
						LUT_INDEX	<=	LUT_INDEX+1'b1;
						mSetup_ST	<=	0;
					end
				endcase
			end
		end
	end
	
	always
	begin
		case(LUT_INDEX)
			Dummy_DATA	:	LUT_DATA	<=	16'h0000;
			SET_LIN_L	:	LUT_DATA	<=	16'h001A;
			SET_LIN_R	:	LUT_DATA	<=	16'h021A;
			SET_HEAD_L	:	LUT_DATA	<=	16'h047B;
			SET_HEAD_R	:	LUT_DATA	<=	16'h067B;
			A_PATH_CTRL	:	LUT_DATA	<=	16'h0812;
			D_PATH_CTRL	:	LUT_DATA	<=	16'h0A06;
			POWER_ON	:	LUT_DATA	<=	16'h0C00;
			SET_FORMAT	:	LUT_DATA	<=	16'h0E01;
			SAMPLE_CTRL	:	LUT_DATA	<=	16'h1002;
			SET_ACTIVE	:	LUT_DATA	<=	16'h1201;
			default:		LUT_DATA	<=	16'h0000;
		endcase
	end
	
	endmodule
			
			
	